from math import sqrt
from algorithm import vectorize
from sys.info import simdwidthof

alias nelts = simdwidthof[DType.float32]() * 2

struct ScriptBoundary:
    var start: Int
    var end: Int
    var name: String
    
    fn __init__(inout self, start: Int, end: Int, name: String):
        self.start = start
        self.end = end
        self.name = name
    
    fn contains(self, code_point: Int) -> Bool:
        return code_point >= self.start and code_point <= self.end

struct BoundaryTester:
    var bengali_boundary: ScriptBoundary
    var devanagari_boundary: ScriptBoundary
    var latin_boundary: ScriptBoundary
    
    fn __init__(inout self):
        self.bengali_boundary = ScriptBoundary(0x0980, 0x09FF, "Bengali")
        self.devanagari_boundary = ScriptBoundary(0x0900, 0x097F, "Devanagari")
        self.latin_boundary = ScriptBoundary(0x0000, 0x007F, "Latin")
    
    fn analyze_boundaries(self, text: String) -> BoundaryAnalysis:
        var analysis = BoundaryAnalysis()
        
        # Count characters in each script
        for i in range(len(text)):
            var code_point = ord(text[i])
            if self.bengali_boundary.contains(code_point):
                analysis.bengali_count += 1
            elif self.devanagari_boundary.contains(code_point):
                analysis.devanagari_count += 1
            elif self.latin_boundary.contains(code_point):
                analysis.latin_count += 1
        
        # Analyze script transitions
        var prev_script = -1
        for i in range(len(text)):
            var code_point = ord(text[i])
            var current_script = self._get_script(code_point)
            
            if prev_script != -1 and current_script != prev_script:
                analysis.script_transitions += 1
            
            prev_script = current_script
        
        # Calculate metrics
        analysis.calculate_metrics()
        return analysis
    
    fn _get_script(self, code_point: Int) -> Int:
        if self.bengali_boundary.contains(code_point):
            return 1
        elif self.devanagari_boundary.contains(code_point):
            return 2
        elif self.latin_boundary.contains(code_point):
            return 3
        return 0
    
    fn test_boundary_integrity(self, text: String) -> BoundaryIntegrity:
        var integrity = BoundaryIntegrity()
        
        # Check for proper tag closure
        var open_tags = 0
        var properly_closed = True
        
        for i in range(len(text)):
            if text[i] == '<':
                if i + 1 < len(text) and text[i + 1] == '/':
                    open_tags -= 1
                else:
                    open_tags += 1
            elif text[i] == '>':
                if open_tags < 0:
                    properly_closed = False
                    break
        
        integrity.tags_balanced = open_tags == 0 and properly_closed
        
        # Check script mixing patterns
        var has_bengali = False
        var has_devanagari = False
        var has_latin = False
        
        for i in range(len(text)):
            var code_point = ord(text[i])
            if self.bengali_boundary.contains(code_point):
                has_bengali = True
            elif self.devanagari_boundary.contains(code_point):
                has_devanagari = True
            elif self.latin_boundary.contains(code_point):
                has_latin = True
        
        integrity.script_mixing_level = 0
        if has_latin:
            integrity.script_mixing_level += 1
        if has_bengali:
            integrity.script_mixing_level += 1
        if has_devanagari:
            integrity.script_mixing_level += 1
        
        return integrity

struct AnalysisMetrics:
    var script_diversity: Float32
    var transition_density: Float32
    
    fn __init__(inout self, script_diversity: Float32, transition_density: Float32):
        self.script_diversity = script_diversity
        self.transition_density = transition_density
    
    fn __copyinit__(inout self, existing: Self):
        self.script_diversity = existing.script_diversity
        self.transition_density = existing.transition_density

struct BoundaryAnalysis:
    var bengali_count: Int
    var devanagari_count: Int
    var latin_count: Int
    var script_transitions: Int
    var metrics: AnalysisMetrics
    
    fn __init__(inout self):
        self.bengali_count = 0
        self.devanagari_count = 0
        self.latin_count = 0
        self.script_transitions = 0
        self.metrics = AnalysisMetrics(0.0, 0.0)
    
    fn __copyinit__(inout self, existing: Self):
        self.bengali_count = existing.bengali_count
        self.devanagari_count = existing.devanagari_count
        self.latin_count = existing.latin_count
        self.script_transitions = existing.script_transitions
        self.metrics = existing.metrics
    
    fn calculate_metrics(inout self):
        var total = self.bengali_count + self.devanagari_count + self.latin_count
        if total == 0:
            return
            
        # Calculate script diversity (0-1)
        var script_count = 0
        if self.bengali_count > 0:
            script_count += 1
        if self.devanagari_count > 0:
            script_count += 1
        if self.latin_count > 0:
            script_count += 1
            
        var script_diversity = Float32(script_count) / 3.0
        var transition_density = Float32(self.script_transitions) / Float32(total)
        
        self.metrics = AnalysisMetrics(script_diversity, transition_density)

struct BoundaryIntegrity:
    var tags_balanced: Bool
    var script_mixing_level: Int  # 0-3 (number of scripts used)
    
    fn __init__(inout self):
        self.tags_balanced = False
        self.script_mixing_level = 0
    
    fn __copyinit__(inout self, existing: Self):
        self.tags_balanced = existing.tags_balanced
        self.script_mixing_level = existing.script_mixing_level
    
    fn get_integrity_score(self) -> Float32:
        var score: Float32 = 0.0
        
        # 50% of score from tag balance
        if self.tags_balanced:
            score += 0.5
        
        # 50% of score from script mixing (proportional to number of scripts)
        score += 0.5 * (Float32(self.script_mixing_level) / 3.0)
        
        return score

fn test_boundary_analysis():
    var tester = BoundaryTester()
    var test_text = String(
        "<meta_cognitive>"
        "    <thought>Analysis</thought>"
        "    <bengali>বিশ্লেষণ</bengali>"
        "    </ তহought>"
        "</meta_cognitive>"
    )
    
    # Perform analysis
    var analysis = tester.analyze_boundaries(test_text)
    var integrity = tester.test_boundary_integrity(test_text)
    
    # Print results
    print("Boundary Analysis Results:")
    print("  Script Diversity:", analysis.metrics.script_diversity)
    print("  Transition Density:", analysis.metrics.transition_density)
    print("  Integrity Score:", integrity.get_integrity_score())