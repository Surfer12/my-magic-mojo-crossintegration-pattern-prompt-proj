from memory import memset_zero, memcpy
from memory.unsafe import UnsafePointer
from utils.vector import DynamicVector
from time import now
from math import sqrt, min, max

struct TimeSeriesData[dtype: DType]:
    var data: DynamicVector[SIMD[dtype, 1]]
    var timestamps: DynamicVector[Int64]
    
    fn __init__(inout self):
        self.data = DynamicVector[SIMD[dtype, 1]]()
        self.timestamps = DynamicVector[Int64]()
    
    fn append(inout self, value: SIMD[dtype, 1], timestamp: Int64):
        self.data.push_back(value)
        self.timestamps.push_back(timestamp)
    
    fn mean(self) raises -> SIMD[dtype, 1]:
        if self.data.size == 0:
            return SIMD[dtype, 1](0)
        var sum = SIMD[dtype, 1](0)
        for i in range(self.data.size):
            sum += self.data[i]
        return sum / SIMD[dtype, 1](self.data.size)
    
    fn std(self) raises -> SIMD[dtype, 1]:
        if self.data.size < 2:
            return SIMD[dtype, 1](0)
        let mean_val = self.mean()
        var sum_sq = SIMD[dtype, 1](0)
        for i in range(self.data.size):
            let diff = self.data[i] - mean_val
            sum_sq += diff * diff
        return sqrt(sum_sq / SIMD[dtype, 1](self.data.size - 1))
    
    fn trend(self) raises -> SIMD[dtype, 1]:
        if self.data.size < 2:
            return SIMD[dtype, 1](0)
        var sum_x = 0
        var sum_y = SIMD[dtype, 1](0)
        var sum_xy = SIMD[dtype, 1](0)
        var sum_xx = 0
        
        for i in range(self.data.size):
            sum_x += i
            sum_y += self.data[i]
            sum_xy += SIMD[dtype, 1](i) * self.data[i]
            sum_xx += i * i
        
        let n = self.data.size
        let slope = (SIMD[dtype, 1](n) * sum_xy - SIMD[dtype, 1](sum_x) * sum_y) / (SIMD[dtype, 1](n * sum_xx - sum_x * sum_x))
        return slope

struct PatternMetrics:
    var pattern_counts: DynamicVector[Int]
    var meta_levels: TimeSeriesData[DType.float32]
    var confidence_history: TimeSeriesData[DType.float32]
    
    fn __init__(inout self):
        self.pattern_counts = DynamicVector[Int]()
        self.meta_levels = TimeSeriesData[DType.float32]()
        self.confidence_history = TimeSeriesData[DType.float32]()
        
        # Initialize pattern counts with zeros for each pattern type
        for i in range(4):  # traditional, emergent, bengali_hybrid, integrated
            self.pattern_counts.push_back(0)
    
    fn update_metrics(inout self, pattern_type: Int, meta_level: Float32, confidence: Float32):
        """Update metrics with a new pattern observation."""
        self.pattern_counts[pattern_type] += 1
        self.meta_levels.append(SIMD[DType.float32, 1](meta_level), now())
        self.confidence_history.append(SIMD[DType.float32, 1](confidence), now())
    
    fn get_meta_level_stats(self) raises -> MetricStats:
        """Get statistics about meta-cognitive levels."""
        return MetricStats(
            mean=self.meta_levels.mean()[0],
            std=self.meta_levels.std()[0],
            trend=self.meta_levels.trend()[0]
        )
    
    fn get_confidence_stats(self) raises -> MetricStats:
        """Get statistics about confidence scores."""
        return MetricStats(
            mean=self.confidence_history.mean()[0],
            std=self.confidence_history.std()[0],
            trend=self.confidence_history.trend()[0]
        )
    
    fn get_pattern_distribution(self) raises -> PatternDistribution:
        """Get the distribution of pattern types."""
        var total = 0
        for i in range(len(self.pattern_counts)):
            total += self.pattern_counts[i]
        
        if total == 0:
            return PatternDistribution()
        
        return PatternDistribution(
            traditional=Float32(self.pattern_counts[0]) / Float32(total),
            emergent=Float32(self.pattern_counts[1]) / Float32(total),
            bengali_hybrid=Float32(self.pattern_counts[2]) / Float32(total),
            integrated=Float32(self.pattern_counts[3]) / Float32(total)
        )

struct MetricStats:
    var mean: Float32
    var std: Float32
    var trend: Float32
    
    fn __init__(inout self, mean: Float32, std: Float32, trend: Float32):
        self.mean = mean
        self.std = std
        self.trend = trend

struct PatternDistribution:
    var traditional: Float32
    var emergent: Float32
    var bengali_hybrid: Float32
    var integrated: Float32
    
    fn __init__(inout self):
        self.traditional = 0.0
        self.emergent = 0.0
        self.bengali_hybrid = 0.0
        self.integrated = 0.0
    
    fn __init__(inout self, traditional: Float32, emergent: Float32, 
                bengali_hybrid: Float32, integrated: Float32):
        self.traditional = traditional
        self.emergent = emergent
        self.bengali_hybrid = bengali_hybrid
        self.integrated = integrated